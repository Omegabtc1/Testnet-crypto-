"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fetchBondingTokenHandler = void 0;
const config_1 = require("../config");
const fetchBondingTokenHandler = (page, limit) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof page !== 'number' || page < 1) {
        throw new Error("Invalid page number. It must be a positive integer.");
    }
    if (typeof limit !== 'number' || limit < 1) {
        throw new Error("Invalid limit. It must be a positive integer.");
    }
    if (!config_1.configs.STXCITY_API_HOST || typeof config_1.configs.STXCITY_API_HOST !== 'string' || config_1.configs.STXCITY_API_HOST.trim() === '') {
        throw new Error("API_HOST is missing or invalid.");
    }
    const url = `${config_1.configs.STXCITY_API_HOST}/api/fetchFrontEnd/bondingData?page=${page}&limit=${limit}`;
    try {
        const response = yield fetch(url, {
            method: 'GET',
            headers: { 'Content-Type': 'application/json' },
        });
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = yield response.json();
        if (data) {
            // Handle success
            const hashData = data;
            return hashData;
        }
        else {
            console.error("Unexpected data structure returned by API:", data);
            throw new Error("Unexpected data structure returned by API");
        }
    }
    catch (error) {
        console.error(`Error fetching data from ${url}:`, error);
        throw error;
    }
});
exports.fetchBondingTokenHandler = fetchBondingTokenHandler;
//# sourceMappingURL=fetchBondingTokenHandler.js.map