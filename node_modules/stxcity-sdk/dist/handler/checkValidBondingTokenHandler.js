"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkValidBondingTokenHandler = void 0;
const config_1 = require("../config");
const checkValidBondingTokenHandler = (dexContract, tokenContract) => __awaiter(void 0, void 0, void 0, function* () {
    if (!dexContract || typeof dexContract !== 'string' || dexContract.trim() === '') {
        throw new Error("Invalid dexContract. It must be a non-empty string.");
    }
    if (!tokenContract || typeof tokenContract !== 'string' || tokenContract.trim() === '') {
        throw new Error("Invalid tokenContract. It must be a non-empty string.");
    }
    if (!config_1.configs.STXCITY_API_HOST || typeof config_1.configs.STXCITY_API_HOST !== 'string' || config_1.configs.STXCITY_API_HOST.trim() === '') {
        throw new Error("API_HOST is missing or invalid.");
    }
    const url = `${config_1.configs.STXCITY_API_HOST}/api/fetchFrontEnd/check-unaccept-bonding-curve?token_contract=${tokenContract}&dex_contract=${dexContract}`;
    try {
        const response = yield fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = yield response.json();
        if (data && data.isAcceptedBondingCurve !== undefined) {
            return data.isAcceptedBondingCurve;
        }
        else {
            return false;
        }
    }
    catch (error) {
        console.error(`Error fetching data from ${url}:`, error);
        throw error;
    }
});
exports.checkValidBondingTokenHandler = checkValidBondingTokenHandler;
//# sourceMappingURL=checkValidBondingTokenHandler.js.map