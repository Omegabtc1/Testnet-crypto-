"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StxCitySDK = void 0;
const network_1 = require("@stacks/network");
const config_1 = require("./config");
const fetchBondingTokenHandler_1 = require("./handler/fetchBondingTokenHandler");
const buyBondingTokenHandler_1 = require("./handler/buyBondingTokenHandler");
const sellBondingTokenHandler_1 = require("./handler/sellBondingTokenHandler");
const searchTokenHandler_1 = require("./handler/searchTokenHandler");
const checkValidBondingTokenHandler_1 = require("./handler/checkValidBondingTokenHandler");
class StxCitySDK {
    constructor(network, config) {
        config_1.configs.STXCITY_API_HOST =
            process.env.STXCITY_API_HOST || process.env.NEXT_PUBLIC_STXCITY_API_HOST || "https://stx.city";
        config_1.configs.STACKS_NETWORK_API_HOST =
            process.env.STACKS_NETWORK_API_HOST ||
                process.env.NEXT_PUBLIC_STACKS_NETWORK_API_HOST ||
                "https://api.mainnet.hiro.so";
        config_1.configs.HIRO_API_KEY =
            process.env.HIRO_API_KEY || process.env.NEXT_PUBLIC_HIRO_API_KEY || "";
        if (config) {
            Object.assign(config_1.configs, config);
        }
        (0, config_1.validateConfig)();
        this.context = {
            network: network ? network : new network_1.StacksMainnet(),
        };
    }
    buyBondingToken(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, buyBondingTokenHandler_1.buyBondingTokenHandler)(params, this.context);
        });
    }
    sellBondingToken(params) {
        return __awaiter(this, void 0, void 0, function* () {
            yield (0, sellBondingTokenHandler_1.sellBondingTokenHandler)(params, this.context);
        });
    }
    getBondingToken(page, limit) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, fetchBondingTokenHandler_1.fetchBondingTokenHandler)(page, limit);
        });
    }
    searchToken(params) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, searchTokenHandler_1.searchTokenHandler)(params);
        });
    }
    checkValidBonding(dexContract, tokenContract) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, checkValidBondingTokenHandler_1.checkValidBondingTokenHandler)(dexContract, tokenContract);
        });
    }
}
exports.StxCitySDK = StxCitySDK;
//# sourceMappingURL=StxCitySDK.js.map